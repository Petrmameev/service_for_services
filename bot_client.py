import asyncio
import json
import os
import re
import smtplib
import sqlite3
import sys
from datetime import datetime, timedelta
from email.message import EmailMessage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

import aiosmtplib
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import *
from service_confirmation_to_mail import send_confirmation_email

storage = MemoryStorage()
bot = Bot(token=token_bot_client, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    master_first_choice_1 = State()
    service_second_choice_1 = State()
    choice_date_after_service_1 = State()
    time_choice_1 = State()
    name_client_1 = State()
    phone_1 = State()
    email_1 = State()
    service_first_choice_2 = State()
    master_second_choice_2 = State()
    choice_date_after_master_2 = State()
    time_choice_2 = State()
    name_client_2 = State()
    phone_2 = State()
    email_2 = State()
    remind_1 = State()
    remind_2 = State()


@dp.message_handler(commands="start")
async def send_welcome(message: types.Message):
    try:
        photo_path = "image/start.jpg"
        start_buttons = ["–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for button in start_buttons:
            keyboard.add(types.KeyboardButton(button))
        with open(photo_path, "rb") as photo:
            await message.answer_photo(photo, reply_markup=keyboard)
    except Exception as e:
        print(f"An error occurred: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


#####################################################################################################################
@dp.message_handler((lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
async def info(message: types.Message):
    # keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    await message.answer(
        "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è 'HAIR SALMING LIICING'\n"
        "üìû 8(913)-914-83-30\n"
        "üó∫ —É–ª. –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 122\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @Petrmameev\n"
        "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: @Petrmameev\n"
        "–•–æ—á—É —Ç–∞–∫–æ–≥–æ –∂–µ –±–æ—Ç–∞: @Petrmameev"
    )


#####################################################################################################################


@dp.message_handler((lambda message: message.text == "–ù–∞–∑–∞–¥"))
async def back(message: types.Message):
    try:
        start_buttons = ["–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞", "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for button in start_buttons:
            keyboard.add(types.KeyboardButton(button))
        await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", reply_markup=keyboard)

    except Exception as e:
        print(f"An error occurred: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


#####################################################################################################################
@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å —É—Å–ª—É–≥—É")
async def choice_service(message: types.Message, state: FSMContext):
    try:
        if message.text in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return
        conn = sqlite3.connect("db")
        c = conn.cursor()
        try:
            c.execute("SELECT id, servicename FROM Services")
            services = c.fetchall()
        finally:
            conn.close()
        print(services)
        service_dict = {service[1]: service[0] for service in services}

        await state.update_data(service_dict=service_dict)
        print(services)
        initial_buttons = [f"{service[1]} " for service in services]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for button in initial_buttons:
            keyboard.add(types.KeyboardButton(button))
        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup=keyboard)
        await Form.service_first_choice_2.set()

    except sqlite3.OperationalError as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ"
        )
        print(f"SQLite operational error occurred: {e}")
    except Exception as e:
        # Catch all other exceptions and provide a user-friendly error message
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(state=Form.service_first_choice_2)
async def choice_masters_after_service(message: types.Message, state: FSMContext):
    try:
        chosen_service_name = message.text
        if chosen_service_name in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return

        user_data = await state.get_data()
        service_dict = user_data.get("service_dict", {})
        print(service_dict)
        service_id = service_dict.get(chosen_service_name)

        if service_id is None:
            await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        conn = sqlite3.connect("db")
        try:
            c = conn.cursor()
            c.execute(
                """SELECT m.id, m.firstName, m.lastName, ms.price
                         FROM Masters AS m
                         JOIN MasterServices AS ms ON m.id = ms.masterId
                         WHERE ms.serviceId = ?""",
                (service_id,),
            )
            masters = c.fetchall()

        finally:
            conn.close()
        print(masters)
        if not masters:
            await message.answer("–£ –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –º–∞—Å—Ç–µ—Ä –Ω–µ –æ–∫–∞–∑—ã–≤–∞–µ—Ç")
            return

        await state.update_data(
            chosen_service=chosen_service_name, serviceId=service_id
        )

        master_dict = {f"{info[1]} {info[2]}": info[0] for info in masters}
        await state.update_data(master_dict=master_dict)
        print(master_dict)

        initial_buttons = [
            f"{info[1]} {info[2]} - –¶–µ–Ω–∞: {int(info[3]) if info[3] == int(info[3]) else info[3]}‚ÇΩ"
            for info in masters
        ]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for button in initial_buttons:
            keyboard.add(types.KeyboardButton(button))

        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏ —É–∑–Ω–∞–π—Ç–µ —Ü–µ–Ω—É", reply_markup=keyboard)
        await Form.master_second_choice_2.set()

    except sqlite3.OperationalError as e:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )

    except Exception as e:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"An error occurred: {e}")


@dp.message_handler(state=Form.master_second_choice_2)
async def choose_date_after_master(message: types.Message, state: FSMContext):
    try:
        chosen_master_name = message.text
        if chosen_master_name in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return
        user_data = await state.get_data()
        master_dict = user_data.get("master_dict", {})
        service_id = user_data.get("serviceId")
        master_id = master_dict.get(chosen_master_name.split(" - ")[0])
        if master_id is None:
            await message.answer("–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await state.update_data(masterId=master_id)
        print(master_id)
        print(service_id)
        if not service_id:
            await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—Å–ª—É–≥–µ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞")
            return

        conn = sqlite3.connect("db")
        c = conn.cursor()
        c.execute("SELECT link_foto, description FROM Masters WHERE id = ?", (master_id,))
        master_record = c.fetchone()
        if master_record:
            master_foto = master_record[0]
            description = master_record[1]
            print(master_foto)
            print(description)
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if master_foto:
            photo_path = os.path.abspath(master_foto)  # Adjust the path as needed
            with open(photo_path, "rb") as photo:
                await message.answer_photo(photo=photo, caption=f"{chosen_master_name} - {description}")



        current_date = datetime.today()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        conn = sqlite3.connect("db")
        try:
            c = conn.cursor()
            date_buttons = []
            for i in range(30):
                date_check = (current_date + timedelta(days=i)).strftime("%d-%m-%Y")
                c.execute(
                    """SELECT EXISTS(
                                SELECT 1 FROM MasterTime
                                WHERE masterId = ? AND dayDate = ? AND
                                (start_0800 IS NOT NULL OR start_0900 IS NOT NULL OR start_1000 IS NOT NULL OR
                                 start_1100 IS NOT NULL OR start_1200 IS NOT NULL OR start_1300 IS NOT NULL OR
                                 start_1400 IS NOT NULL OR start_1500 IS NOT NULL OR start_1600 IS NOT NULL OR
                                 start_1700 IS NOT NULL OR start_1800 IS NOT NULL OR start_1900 IS NOT NULL)
                            )""",
                    (master_id, date_check),
                )
                if c.fetchone()[0]:
                    date_buttons.append(types.KeyboardButton(date_check))
                    if len(date_buttons) == 3:
                        keyboard.row(*date_buttons)
                        date_buttons = []
            if date_buttons:
                keyboard.row(*date_buttons)
        finally:
            conn.close()

        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)

        if keyboard.keyboard:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=keyboard)
            await Form.choice_date_after_master_2.set()
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞")
            await Form.choice_date_after_master_2.set()

    except sqlite3.OperationalError as op_err:
        await message.answer(
            "–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
        )
        print(f"Database error: {op_err}")

    except Exception as e:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"An unexpected error occurred: {e}")


@dp.message_handler(state=Form.choice_date_after_master_2)
async def choose_time_after_date_after_master(
    message: types.Message, state: FSMContext
):
    try:
        selected_date = message.text
        if selected_date in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return

        await state.update_data(selected_date=selected_date)
        user_data = await state.get_data()
        master_id = user_data.get("masterId")
        service_id = user_data.get("serviceId")
        print(master_id)
        print(service_id)
        if not master_id:
            await message.answer(
                "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞"
            )
            return
        conn = sqlite3.connect("db")
        try:
            c = conn.cursor()
            c.execute(
                """SELECT start_0800,
                                start_0900,
                                start_1000,
                                start_1100,
                                start_1200,
                                start_1300,
                                start_1400,
                                start_1500,
                                start_1600,
                                start_1700,
                                start_1800,
                                start_1900
                         FROM MasterTime
                         WHERE masterId = ? AND dayDate = ?""",
                (master_id, selected_date),
            )
            times = c.fetchone()

            c.execute(
                """SELECT appointmentTime
                             FROM Record
                             WHERE masterId = ? AND appointmentDate = ?""",
                (master_id, selected_date),
            )

            booked_times = [time[0] for time in c.fetchall()]

        finally:
            conn.close()

        now = datetime.now()

        choisen_date_datetime = datetime.strptime(selected_date, "%d-%m-%Y")
        time_threshold = (
            (now + timedelta(minutes=10)).strftime("%H:%M")
            if now.date() == choisen_date_datetime.date()
            else "00:00"
        )
        available_times = [
            time
            for time in times
            if time
            and (now.date() < choisen_date_datetime.date() or time > time_threshold)
            and time not in booked_times
        ]

        if not available_times:
            await message.answer(
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É"
            )
            return

        await state.update_data(available_times=available_times)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        times_row = []
        for time in available_times:
            if time:
                times_row.append(types.KeyboardButton(time))
                if len(times_row) == 3:
                    keyboard.row(*times_row)
                    times_row = []
        if times_row:
            keyboard.row(*times_row)
        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏", reply_markup=keyboard)
        await Form.time_choice_2.set()

    except sqlite3.OperationalError as db_err:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
        print(f"Database error: {db_err}")

    except Exception as err:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
        print(f"Unexpected error: {err}")


@dp.message_handler(state=Form.time_choice_2)
async def input_name_client(message: types.Message, state: FSMContext):
    try:
        choicen_time = message.text
        if choicen_time in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return
        user_data = await state.get_data()
        available_times = user_data["available_times"]
        if choicen_time not in available_times:
            await message.answer(
                "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
            )
            return
        await state.update_data(appointmentTime=choicen_time)
        await state.update_data(phone=message.text)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è", reply_markup=keyboard)
        await Form.name_client_2.set()
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        print(f"Error in input_name_client: {e}")


@dp.message_handler(state=Form.name_client_2)
async def input_phone(message: types.Message, state: FSMContext):
    try:
        if message.text in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return
        print(message.text)
        await state.update_data(name=message.text)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard)
        await Form.phone_2.set()
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        print(f"Error in input_phone: {e}")


@dp.message_handler(state=Form.phone_2)
async def check_phone(message: types.Message, state: FSMContext):
    try:
        choise_name = message.text
        print(choise_name)
        if choise_name in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return
        phone_number = message.text
        if not is_valid_phone(phone_number):
            await message.answer(
                "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
            return
        await state.update_data(phone=phone_number)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email", reply_markup=keyboard)
        await Form.email_2.set()
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        print(f"Error in check_phone: {e}")


@dp.message_handler(state=Form.email_2)
async def write_client_and_save_record(message: types.Message, state: FSMContext):
    try:
        if message.text in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return

        email = message.text
        if not is_valid_email(email):
            await message.answer(
                "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
            return
        await state.update_data(email_clients=email)

        user_data = await state.get_data()
        client_first_name = user_data.get("name")
        client_phone_number = user_data.get("phone")
        master_id = user_data.get("masterId")
        service_id = user_data.get("serviceId")
        appointment_date = user_data.get("selected_date")
        appointment_time = user_data.get("appointmentTime")

        if service_id is None:
            await message.answer("–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        with sqlite3.connect("db") as conn:
            c = conn.cursor()
            c.execute(
                """SELECT appointmentTime FROM Record 
                         WHERE masterId = ? AND appointmentDate = ? AND appointmentTime = ?""",
                (master_id, appointment_date, appointment_time),
            )
            if c.fetchone():
                raise Exception("–í—ã –Ω–µ —É—Å–ø–µ–ª–∏, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è.")

            c.execute(
                """INSERT INTO Clients (firstName, phoneNumber, eMail) VALUES (?, ?, ?)""",
                (client_first_name, client_phone_number, email),
            )
            client_id = c.lastrowid

            c.execute(
                """SELECT firstName, lastName FROM Masters WHERE id = ?""", (master_id,)
            )
            if master_record := c.fetchone():
                firstName, lastName = master_record[0], master_record[1]

            c.execute(
                """SELECT serviceName FROM Services WHERE id = ?""", (service_id,)
            )
            if service_record := c.fetchone():
                serviceName = service_record[0]

            c.execute(
                """SELECT price FROM MasterServices WHERE masterId = ? AND  serviceId = ?""",
                (master_id, service_id),
            )
            if price_record := c.fetchone():
                price = price_record[0]

            reminder_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            reminder_times = [
                ("24 —á–∞—Å–∞", 24),
                ("12 —á–∞—Å–æ–≤", 12),
                ("6 —á–∞—Å–æ–≤", 6),
                ("3 —á–∞—Å–∞", 3),
                ("2 —á–∞—Å–∞", 2),
                ("1 —á–∞—Å", 1),
            ]
            buttons = [
                types.KeyboardButton(text=f"–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ {label}")
                for label, hours in reminder_times
            ]
            while buttons:
                button_pair = buttons[:2]
                reminder_keyboard.add(*button_pair)
                buttons = buttons[2:]
            dont_remind = types.KeyboardButton("–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å")
            reminder_keyboard.add(dont_remind)
            await Form.remind_2.set()

            c.execute(
                """INSERT INTO Record (clientFirstName, clientPhoneNumber, masterId,
                         serviceId, appointmentDate, appointmentTime) VALUES (?, ?, ?, ?, ?, ?)""",
                (
                    client_first_name,
                    client_phone_number,
                    master_id,
                    service_id,
                    appointment_date,
                    appointment_time,
                ),
            )
            conn.commit()
        await message.answer(
            f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É {serviceName} –∫ –º–∞—Å—Ç–µ—Ä—É {firstName} {lastName}"
            f" –Ω–∞ {appointment_date} –≤ {appointment_time}, —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:{int(price) 
                             if price == int(price) else price}‚ÇΩ",
            reply_markup=reminder_keyboard,
        )
        await send_confirmation_email(
            client_first_name,
            email,
            appointment_date,
            appointment_time,
            serviceName,
            price,
            firstName,
            lastName,
        )
    except sqlite3.IntegrityError as ie:
        await message.answer(
            "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )
        print(f"Database IntegrityError: {ie}")

    except sqlite3.OperationalError as oe:
        await message.answer(
            "–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
        )
        print(f"Database OperationalError: {oe}")

    except Exception as e:
        await message.answer(str(e))
        print(f"Unexpected error: {e}")


@dp.message_handler(state=Form.remind_2)
async def set_remind_in_db(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        client_first_name = user_data.get("name")
        client_phone_number = user_data.get("phone")
        appointment_date = user_data.get("selected_date")
        appointment_time = user_data.get("appointmentTime")
        if message.text in ("–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å", "–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return
        else:
            remind_text = message.text.split()
            print(remind_text)
            remind = int(remind_text[2]) if len(remind_text) == 4 else 0

        with sqlite3.connect("db") as conn:
            c = conn.cursor()
            c.execute(
                """UPDATE Record SET remind = ? WHERE clientPhoneNumber = ? AND appointmentDate = ? AND appointmentTime = ?""",
                (remind, client_phone_number, appointment_date, appointment_time),
            )
            conn.commit()

        await state.finish()
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –Ω–∞ –ø–æ—á—Ç—É –∑–∞ {remind_text[2]} —á–∞—Å(–∞)."
        )
        await send_welcome(message)
        return
    except sqlite3.IntegrityError as ie:
        await message.answer(
            "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )
        print(f"Database IntegrityError: {ie}")
    except sqlite3.OperationalError as oe:
        await message.answer(
            "–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
        )
        print(f"Database OperationalError: {oe}")
    except Exception as e:
        await message.answer(str(e))
        print(f"Unexpected error: {e}")


##################################################################################################################


@dp.message_handler(lambda message: message.text == "–í—ã–±—Ä–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞")
async def choice_masters(message: types.Message, state: FSMContext):
    try:
        if message.text in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return
        conn = sqlite3.connect("db")
        c = conn.cursor()
        c.execute("SELECT id, firstName, lastName, link_foto, description FROM Masters")
        masters = c.fetchall()
        conn.close()
        master_dict = {f"{master[1]} {master[2]}": master[0] for master in masters}

        await state.update_data(master_dict=master_dict)

        initial_buttons = [f"{master[1]} {master[2]}" for master in masters]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

        for button in initial_buttons:
            keyboard.add(types.KeyboardButton(button))

        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞", reply_markup=keyboard)
        await Form.master_first_choice_1.set()

    except sqlite3.OperationalError as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ"
        )
        print(f"SQLite operational error occurred: {e}")
    except Exception as e:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@dp.message_handler(state=Form.master_first_choice_1)
async def choice_service_after_master(message: types.Message, state: FSMContext):
    try:
        chosen_master_name = message.text
        if chosen_master_name in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return

        user_data = await state.get_data()
        master_dict = user_data.get("master_dict", {})
        master_id = master_dict.get(chosen_master_name)

        if master_id is None:
            await message.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        print(master_id)

        #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞

        conn = sqlite3.connect("db")
        c = conn.cursor()
        c.execute("SELECT link_foto, description FROM Masters WHERE id = ?", (master_id,))
        master_record = c.fetchone()
        if master_record:
            master_foto = master_record[0]
            description = master_record[1]
            print(master_foto)
            print(description)
        else:
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if master_foto:
            photo_path = os.path.abspath(master_foto)  # Adjust the path as needed
            with open(photo_path, "rb") as photo:
                await message.answer_photo(photo=photo, caption=f"{chosen_master_name} - {description}")




        conn.close()
        conn = sqlite3.connect("db")
        try:
            c = conn.cursor()
            c.execute(
                """SELECT Services.serviceName, MasterServices.price, MasterServices.serviceId
                         FROM MasterServices
                         JOIN Services ON MasterServices.serviceId = Services.id
                         WHERE MasterServices.masterId = ?;""",
                (master_id,),
            )
            services = c.fetchall()
        finally:
            conn.close()
            print(services)

        if not services:
            await message.answer("–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥")
            return

        await state.update_data(chosen_master=chosen_master_name, masterId=master_id)

        service_dict = {f"{service[0]}": service[2] for service in services}
        await state.update_data(service_dict=service_dict)

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

        # Update the loop to handle service_name, price, and service_id
        for service_name, price, service_id in services:
            button_text = f"{service_name} - –¶–µ–Ω–∞: {int(price) if price == int(price) else price}‚ÇΩ"
            keyboard.add(types.KeyboardButton(button_text))

        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É", reply_markup=keyboard)
        await Form.service_second_choice_1.set()
    except sqlite3.OperationalError as e:
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )

    except Exception as e:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"An error occurred: {e}")


@dp.message_handler(state=Form.service_second_choice_1)
async def choose_date_after_service(message: types.Message, state: FSMContext):
    try:
        chosen_service_name = message.text
        if chosen_service_name in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return
        user_data = await state.get_data()
        service_dict = user_data.get("service_dict", {})
        master_id = user_data.get("masterId")

        service_id = service_dict.get(chosen_service_name.split(" - ")[0])
        if service_id is None:
            await message.answer("–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await state.update_data(serviceId=service_id)
        print(master_id)
        print(service_id)
        if not master_id:
            await message.answer(
                "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞"
            )
            return
        current_date = datetime.today()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        conn = sqlite3.connect("db")
        try:
            c = conn.cursor()
            date_buttons = []
            for i in range(30):
                date_check = (current_date + timedelta(days=i)).strftime("%d-%m-%Y")
                c.execute(
                    """SELECT EXISTS(
                                SELECT 1 FROM MasterTime
                                WHERE masterId = ? AND dayDate = ? AND
                                (start_0800 IS NOT NULL OR start_0900 IS NOT NULL OR start_1000 IS NOT NULL OR
                                 start_1100 IS NOT NULL OR start_1200 IS NOT NULL OR start_1300 IS NOT NULL OR
                                 start_1400 IS NOT NULL OR start_1500 IS NOT NULL OR start_1600 IS NOT NULL OR
                                 start_1700 IS NOT NULL OR start_1800 IS NOT NULL OR start_1900 IS NOT NULL)
                            )""",
                    (master_id, date_check),
                )
                if c.fetchone()[0]:
                    date_buttons.append(types.KeyboardButton(date_check))
                    if len(date_buttons) == 3:
                        keyboard.row(*date_buttons)
                        date_buttons = []
            if date_buttons:
                keyboard.row(*date_buttons)
        finally:
            conn.close()

        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)

        if keyboard.keyboard:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=keyboard)
            await Form.choice_date_after_service_1.set()
        else:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞")
            await Form.choice_date_after_service_1.set()

    except sqlite3.OperationalError as op_err:
        await message.answer(
            "–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
        )
        print(f"Database error: {op_err}")

    except Exception as e:
        # Handle other exceptions
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        print(f"An unexpected error occurred: {e}")


@dp.message_handler(state=Form.choice_date_after_service_1)
async def choose_time_after_date_after_service(
    message: types.Message, state: FSMContext
):
    try:
        selected_date = message.text
        if selected_date in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return

        await state.update_data(selected_date=selected_date)
        user_data = await state.get_data()
        master_id = user_data.get("masterId")
        service_id = user_data.get("serviceId")
        if not master_id:
            await message.answer(
                "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞"
            )
            return
        conn = sqlite3.connect("db")
        try:
            c = conn.cursor()
            c.execute(
                """SELECT start_0800,
                                    start_0900,
                                    start_1000,
                                    start_1100,
                                    start_1200,
                                    start_1300,
                                    start_1400,
                                    start_1500,
                                    start_1600,
                                    start_1700,
                                    start_1800,
                                    start_1900
                         FROM MasterTime
                         WHERE masterId = ? AND dayDate = ?""",
                (master_id, selected_date),
            )
            times = c.fetchone()

            c.execute(
                """SELECT appointmentTime
                                         FROM Record
                                         WHERE masterId = ? AND appointmentDate = ?""",
                (master_id, selected_date),
            )

            booked_times = [time[0] for time in c.fetchall()]

        finally:
            conn.close()

        now = datetime.now()
        choisen_date_datetime = datetime.strptime(selected_date, "%d-%m-%Y")
        time_threshold = (
            (now + timedelta(minutes=10)).strftime("%H:%M")
            if now.date() == choisen_date_datetime.date()
            else "00:00"
        )
        available_times = [
            time
            for time in times
            if time
            and (now.date() < choisen_date_datetime.date() or time > time_threshold)
            and time not in booked_times
        ]

        if not available_times:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É")
            return

        await state.update_data(available_times=available_times)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        times_row = []
        for time in available_times:
            if time:
                times_row.append(types.KeyboardButton(time))
                if len(times_row) == 3:
                    keyboard.row(*times_row)
                    times_row = []
        if times_row:
            keyboard.row(*times_row)
        cancel_button = types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        keyboard.add(cancel_button)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏", reply_markup=keyboard)
        await Form.time_choice_1.set()

    except sqlite3.OperationalError as db_err:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
        print(f"Database error: {db_err}")

    except Exception as err:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
        print(f"Unexpected error: {err}")


@dp.message_handler(state=Form.time_choice_1)
async def input_name_client(message: types.Message, state: FSMContext):
    try:
        choicen_time = message.text
        if choicen_time in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await cancel_handler(message, state)
            return
        user_data = await state.get_data()
        available_times = user_data["available_times"]
        if choicen_time not in available_times:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
            return
        await state.update_data(appointmentTime=choicen_time)
        await state.update_data(phone=message.text)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è", reply_markup=keyboard)
        await Form.name_client_1.set()
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        print(f"Error in input_name_client: {e}")


@dp.message_handler(state=Form.name_client_1)
async def input_phone(message: types.Message, state: FSMContext):
    try:
        print(message.text)
        if message.text in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return
        await state.update_data(name=message.text)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=keyboard)
        await Form.phone_1.set()
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        print(f"Error in input_phone: {e}")


@dp.message_handler(state=Form.phone_1)
async def check_phone(message: types.Message, state: FSMContext):
    try:
        choise_name = message.text
        print(choise_name)
        if choise_name in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return
        phone_number = message.text
        if not is_valid_phone(phone_number):
            await message.answer(
                "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
            return
        await state.update_data(phone=phone_number)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(
            types.KeyboardButton("–û—Ç–º–µ–Ω–∞")
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email", reply_markup=keyboard)
        await Form.email_1.set()
    except Exception as e:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        )
        print(f"Error in check_phone: {e}")


@dp.message_handler(state=Form.email_1)
async def write_client_and_save_record(message: types.Message, state: FSMContext):
    try:
        if message.text in ("–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return

        email = message.text
        if not is_valid_email(email):
            await message.answer(
                "–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑"
            )
            return
        await state.update_data(email_clients=email)

        user_data = await state.get_data()
        client_first_name = user_data.get("name")
        client_phone_number = user_data.get("phone")
        master_id = user_data.get("masterId")
        service_id = user_data.get("serviceId")
        appointment_date = user_data.get("selected_date")
        appointment_time = user_data.get("appointmentTime")

        if service_id is None:
            await message.answer("–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        with sqlite3.connect("db") as conn:
            c = conn.cursor()
            c.execute(
                """SELECT appointmentTime FROM Record 
                         WHERE masterId = ? AND appointmentDate = ? AND appointmentTime = ?""",
                (master_id, appointment_date, appointment_time),
            )
            if c.fetchone():  # If the slot is taken, raise an exception
                raise Exception("–í—ã –Ω–µ —É—Å–ø–µ–ª–∏, –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è")

            c.execute(
                """INSERT INTO Clients (firstName, phoneNumber, eMail) VALUES (?, ?, ?)""",
                (client_first_name, client_phone_number, email),
            )
            client_id = c.lastrowid

            c.execute(
                """SELECT firstName, lastName FROM Masters WHERE id = ?""", (master_id,)
            )
            if master_record := c.fetchone():
                firstName, lastName = master_record[0], master_record[1]

            c.execute(
                """SELECT serviceName FROM Services WHERE id = ?""", (service_id,)
            )
            if service_record := c.fetchone():
                serviceName = service_record[0]

            c.execute(
                """SELECT price FROM MasterServices WHERE masterId = ? AND  serviceId = ?""",
                (master_id, service_id),
            )
            if price_record := c.fetchone():
                price = price_record[0]

            reminder_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            reminder_times = [
                ("24 —á–∞—Å–∞", 24),
                ("12 —á–∞—Å–æ–≤", 12),
                ("6 —á–∞—Å–æ–≤", 6),
                ("3 —á–∞—Å–∞", 3),
                ("2 —á–∞—Å–∞", 2),
                ("1 —á–∞—Å", 1),
            ]
            buttons = [
                types.KeyboardButton(text=f"–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ {label}")
                for label, hours in reminder_times
            ]
            while buttons:
                button_pair = buttons[:2]
                reminder_keyboard.add(*button_pair)
                buttons = buttons[2:]
            dont_remind = types.KeyboardButton("–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å")
            reminder_keyboard.add(dont_remind)
            await Form.remind_1.set()

            c.execute(
                """INSERT INTO Record (clientFirstName, clientPhoneNumber, masterId,
                         serviceId, appointmentDate, appointmentTime) VALUES (?, ?, ?, ?, ?, ?)""",
                (
                    client_first_name,
                    client_phone_number,
                    master_id,
                    service_id,
                    appointment_date,
                    appointment_time,
                ),
            )
            conn.commit()
        await message.answer(
            f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —É—Å–ª—É–≥—É {serviceName} –∫ –º–∞—Å—Ç–µ—Ä—É {firstName} {lastName} –Ω–∞ {appointment_date} –≤ "
            f"{appointment_time}, —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:{int(price) 
            if price == int(price) else price}‚ÇΩ",
            reply_markup=reminder_keyboard,
        )
        await send_confirmation_email(
            client_first_name,
            email,
            appointment_date,
            appointment_time,
            serviceName,
            price,
            firstName,
            lastName,
        )
    except sqlite3.IntegrityError as ie:
        await message.answer(
            "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )
        print(f"Database IntegrityError: {ie}")

    except sqlite3.OperationalError as oe:
        await message.answer(
            "–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
        )
        print(f"Database OperationalError: {oe}")

    except Exception as e:
        await message.answer(str(e))
        print(f"Unexpected error: {e}")


@dp.message_handler(state=Form.remind_1)
async def set_remind_in_db(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        client_first_name = user_data.get("name")
        client_phone_number = user_data.get("phone")
        appointment_date = user_data.get("selected_date")
        appointment_time = user_data.get("appointmentTime")
        if message.text in ("–ù–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å", "–û—Ç–º–µ–Ω–∞", "/start"):
            await state.finish()
            await send_welcome(message)
            return
        else:
            remind_text = message.text.split()
            print(remind_text)
            remind = int(remind_text[2]) if len(remind_text) == 4 else 0

        with sqlite3.connect("db") as conn:
            c = conn.cursor()
            c.execute(
                """UPDATE Record SET remind = ? WHERE clientPhoneNumber = ? AND appointmentDate = ? AND appointmentTime = ?""",
                (remind, client_phone_number, appointment_date, appointment_time),
            )
            conn.commit()

        await state.finish()
        await message.answer(
            f"–û—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –Ω–∞ –ø–æ—á—Ç—É –∑–∞ {remind_text[2]} —á–∞—Å(–∞)."
        )
        await send_welcome(message)
        return
    except sqlite3.IntegrityError as ie:
        await message.answer(
            "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
        )
        print(f"Database IntegrityError: {ie}")
    except sqlite3.OperationalError as oe:
        await message.answer(
            "–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ"
        )
        print(f"Database OperationalError: {oe}")
    except Exception as e:
        await message.answer(str(e))
        print(f"Unexpected error: {e}")


#####################################################################################################################


def is_valid_phone(phone_number: str) -> bool:
    pattern = r"^\+?[78][-\(]?\d{3}\)?-?\d{3}-?\d{2}-?\d{2}$"
    return bool(re.fullmatch(pattern, phone_number))


def is_valid_email(email: str) -> bool:
    pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z]{2,}$"
    return bool(re.fullmatch(pattern, email))


@dp.message_handler(state="*", commands="–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await send_welcome(message)


if __name__ == "__main__":
    from aiogram import executor

    try:
        loop = asyncio.get_event_loop()
        bot_info = loop.run_until_complete(bot.get_me())
        print(f"Bot info: {bot_info}")
    except Exception as e:
        print(f"Bot is already running: {str(e)}")
        exit(0)
    executor.start_polling(dp)
